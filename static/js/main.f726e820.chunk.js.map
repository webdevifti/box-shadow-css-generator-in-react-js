{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","Hori","setHori","Veri","setVeri","Blur","setBlur","Color","setColor","CheckOn","setCheckOn","borderRadius","setBorderRadius","isCopied","setIsCopied","codeSnippet","className","type","min","max","value","onChange","e","target","checked","style","boxShadow","text","onCopy","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPA2EeA,MAxEf,WACE,MAA0BC,mBAAS,IAAnC,mBAAQC,EAAR,KAAcC,EAAd,KACA,EAA0BF,mBAAS,IAAnC,mBAAQG,EAAR,KAAcC,EAAd,KACA,EAA0BJ,mBAAS,IAAnC,mBAAQK,EAAR,KAAcC,EAAd,KACA,EAA4BN,mBAAS,QAArC,mBAAQO,EAAR,KAAeC,EAAf,KACA,EAAgCR,oBAAS,GAAzC,mBAAQS,EAAR,KAAiBC,EAAjB,KACA,EAA0CV,mBAAS,GAAnD,mBAAQW,EAAR,KAAsBC,EAAtB,KAGA,EAAkCZ,oBAAS,GAA3C,mBAAQa,EAAR,KAAkBC,EAAlB,KAGMC,EAAW,4BACDN,EAAU,QAAS,GADlB,YACwBR,EADxB,cACkCE,EADlC,cAC4CE,EAD5C,cACsDE,EADtD,kCAEGI,EAFH,UAajB,OACE,qCACE,oBAAIK,UAAU,QAAd,wDACA,sBAAKA,UAAU,MAAf,UAEE,sBAAKA,UAAU,WAAf,UACI,sDACA,uBAAOC,KAAK,QAAQC,IAAI,OAAOC,IAAI,MAAMC,MAAOnB,EAAMoB,SAAW,SAACC,GAAD,OAAOpB,EAAQoB,EAAEC,OAAOH,UAEzF,oDACA,uBAAOH,KAAK,QAAQC,IAAI,OAAOC,IAAI,MAAMC,MAAOjB,EAAMkB,SAAW,SAACC,GAAD,OAAOlB,EAAQkB,EAAEC,OAAOH,UAEzF,yCACA,uBAAOH,KAAK,QAAQC,IAAI,IAAIC,IAAI,MAAMC,MAAOf,EAAMgB,SAAW,SAACC,GAAD,OAAOhB,EAAQgB,EAAEC,OAAOH,UAItF,kDACA,uBAAOH,KAAK,QAAQG,MAAOT,EAAcU,SAAW,SAACC,GAAD,OAAOV,EAAgBU,EAAEC,OAAOH,UACpF,0CACA,uBAAOH,KAAK,QAAQG,MAAOb,EAAOc,SAAW,SAACC,GAAD,OAAOd,EAASc,EAAEC,OAAOH,UAEtE,qBAAKJ,UAAU,SAAf,SACE,4CACE,uBAAOC,KAAK,WAAWO,QAASf,EAASY,SAAU,kBAAMX,GAAYD,MACrE,sBAAMO,UAAU,UAFlB,gBAQN,sBAAKA,UAAU,SAAf,UACE,qBAAKA,UAAU,MAAMS,MAAO,CAAEC,UAAU,GAAD,OAAKjB,EAAU,QAAS,GAAxB,YAA8BR,EAA9B,cAAwCE,EAAxC,cAAkDE,EAAlD,cAA4DE,GAASI,aAAa,GAAD,OAAKA,EAAL,MAAxH,SAEE,4BAAII,MAGN,cAAC,kBAAD,CAAiBY,KAAMZ,EAAaa,OA5C1B,WAChBd,GAAY,GACZe,YAAW,WACTf,GAAY,KACX,MAwCG,SACE,sBAAME,UAAU,WAAhB,SAA6BH,EAAW,SAAW,yBCtDhDiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f726e820.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nfunction App() {\n  const [ Hori, setHori ] = useState(10)\n  const [ Veri, setVeri ] = useState(10)\n  const [ Blur, setBlur ] = useState(10)\n  const [ Color, setColor ] = useState('#000')\n  const [ CheckOn, setCheckOn ] = useState(false)\n  const [ borderRadius, setBorderRadius ] = useState(0)\n\n  // Copy State\n  const [ isCopied, setIsCopied ] = useState(false);\n\n  // Get The CSS Properties\n  const codeSnippet = `\n    box-shadow: ${CheckOn ? 'inset': ''} ${Hori}px ${Veri}px ${Blur}px ${Color};\n     border-radius: ${borderRadius}%;\n  `;\n\n  // Copy the CSS Properties into your Clipboard\n  const oncopyTxt = () => {\n    setIsCopied(true);\n    setTimeout(() => {\n      setIsCopied(false);\n    }, 3000);\n  };\n\n  return (\n    <>\n      <h3 className=\"title\">Box Shadow and Border Radius CSS Generator</h3>\n      <div className=\"App\">\n        \n        <div className=\"controls\">\n            <label>Horizontal Length</label>\n            <input type=\"range\" min=\"-200\" max=\"200\" value={Hori} onChange={ (e) => setHori(e.target.value) } />\n\n            <label>Vertical Length</label>\n            <input type=\"range\" min=\"-200\" max=\"200\" value={Veri} onChange={ (e) => setVeri(e.target.value) } />\n\n            <label>Blur</label>\n            <input type=\"range\" min=\"0\" max=\"200\" value={Blur} onChange={ (e) => setBlur(e.target.value) } />\n\n          \n\n            <label>Border Radius</label>\n            <input type=\"range\" value={borderRadius} onChange={ (e) => setBorderRadius(e.target.value) } />\n            <label>Color</label>\n            <input type=\"color\" value={Color} onChange={ (e) => setColor(e.target.value) } />\n\n            <div className=\"switch\">\n              <label>Outline\n                <input type=\"checkbox\" checked={CheckOn} onChange={() => setCheckOn(!CheckOn)} />\n                <span className=\"lever\"></span>\n                Inset\n              </label>\n            </div>\n\n        </div>\n        <div className=\"output\">\n          <div className=\"box\" style={{ boxShadow: `${CheckOn ? 'inset': ''} ${Hori}px ${Veri}px ${Blur}px ${Color}`, borderRadius: `${borderRadius}%` }} >\n\n            <p>{codeSnippet}</p>\n           \n          </div>\n          <CopyToClipboard text={codeSnippet} onCopy={oncopyTxt} >\n            <span className=\"btn-copy\">{ isCopied ? \"Copied\" : \"Copy CSS\" }</span>\n          </CopyToClipboard>\n          \n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}